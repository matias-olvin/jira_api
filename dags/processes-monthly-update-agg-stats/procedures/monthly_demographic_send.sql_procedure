CREATE OR REPLACE PROCEDURE `storage-prod-olvin-com.procedures.monthly_send`(
    create_statement STRING,
    location_key STRING,
    storage_project_id STRING,
    date_start STRING,
    ds STRING,
    org_demographics_table STRING,
    place_dataset STRING,
    activity_table STRING,
    covid_dictionary_table STRING,
    covid_table STRING,
    postgres_table STRING
)
BEGIN
DECLARE opening_date_str STRING DEFAULT "NULL";
DECLARE closing_date_str STRING DEFAULT "NULL";
IF location_key = "fk_sgplaces" THEN
    SET opening_date_str = "opening_date";
    SET closing_date_str = "closing_date";
END IF;
EXECUTE IMMEDIATE FORMAT(
"""
%s
WITH
places_dates AS (
  SELECT
  pid AS %s,
  IFNULL(%s, DATE("2019-01-01")) AS opening_date,
  IFNULL(%s, DATE("%s")) AS closing_date
  FROM `%s`
),
dates_reference AS (
    SELECT
        local_date
    FROM (
        SELECT
            GENERATE_DATE_ARRAY(MIN(local_date), DATE_ADD(MAX(local_date), INTERVAL 1 MONTH)) AS date_array
        FROM `%s`
    )
    CROSS JOIN UNNEST(date_array) AS local_date
),
covid_restrictions_table AS (
    SELECT
        %s,
        local_date,
        IF(AVG(covid_factor) < 5, 1, 0) AS covid_factor
    FROM (
        SELECT
            %s,
            DATE_TRUNC(local_date, MONTH) AS local_date,
            COALESCE(factor_county, factor_city, factor_state, 0.0) AS covid_factor,
        FROM (
            SELECT
                *
            FROM
                `%s`
            CROSS JOIN dates_reference
        )
        LEFT JOIN (SELECT local_date, identifier AS identifier_county_restrictions, factor AS factor_county FROM `%s`)
        USING (identifier_county_restrictions, local_date)
        LEFT JOIN (SELECT local_date, identifier AS identifier_city_restrictions, factor AS factor_city FROM `%s`)
        USING (identifier_city_restrictions, local_date)
        LEFT JOIN (SELECT local_date, identifier AS identifier_state_restrictions, factor AS factor_state FROM `%s`)
        USING (identifier_state_restrictions, local_date)
    )
    GROUP BY
        local_date,
        %s
),
final_demographics_table AS(
  SELECT
    %s,
    local_date,
    ARRAY(SELECT ROUND(percentage * known_total * IFNULL(covid_factor, 1)) FROM UNNEST(sorted_income_percentages) AS percentage WITH OFFSET AS index ORDER BY index) AS sorted_income_percentages,
    ARRAY(SELECT ROUND(percentage * known_total * IFNULL(covid_factor, 1)) FROM UNNEST(sorted_house_value_percentages) AS percentage WITH OFFSET AS index ORDER BY index) AS sorted_house_value_percentages,
    ARRAY(SELECT ROUND(percentage * known_total * IFNULL(covid_factor, 1)) FROM UNNEST(sorted_life_stage_percentages) AS percentage WITH OFFSET AS index ORDER BY index) AS sorted_life_stage_percentages,
    ARRAY(SELECT ROUND(percentage * known_total * IFNULL(covid_factor, 1)) FROM UNNEST(sorted_occupation_percentages) AS percentage WITH OFFSET AS index ORDER BY index) AS sorted_occupation_percentages,
    ARRAY(SELECT ROUND(percentage * known_total * IFNULL(covid_factor, 1)) FROM UNNEST(sorted_transport_percentages) AS percentage WITH OFFSET AS index ORDER BY index) AS sorted_transport_percentages,
    ROUND(owner_percentage*100, 2) AS owner_percentage,
    ROUND(local_percentage*100, 2) AS local_percentage,
  FROM `%s`
  JOIN covid_restrictions_table USING (%s, local_date)
    WHERE
      local_date >= "%s"
      AND local_date <= DATE_ADD("%s", INTERVAL 1 MONTH)
)
SELECT
  %s,
  local_date,
  TO_JSON_STRING(sorted_income_percentages) AS sorted_income_percentages,
  TO_JSON_STRING(sorted_house_value_percentages) AS sorted_house_value_percentages,
  TO_JSON_STRING(sorted_life_stage_percentages) AS sorted_life_stage_percentages,
  TO_JSON_STRING(sorted_occupation_percentages) AS sorted_occupation_percentages,
  TO_JSON_STRING(sorted_transport_percentages) AS sorted_transport_percentages,
  owner_percentage,
  local_percentage,
FROM
  final_demographics_table
JOIN
  (
    SELECT
        %s,
    FROM
        `%s.%s.%s`
    WHERE activity IN ('active', 'watch_list', 'inactive') AND run_date = DATE_TRUNC("%s", MONTH)
  )
USING(%s)
JOIN places_dates
USING(%s)
WHERE local_date >= opening_date AND local_date <= closing_date
""",
create_statement,
-- open dates
location_key, opening_date_str, closing_date_str, ds, postgres_table,
-- dates_reference
org_demographics_table,
-- covid_restrictions_table
location_key, location_key, covid_dictionary_table, covid_table, covid_table, covid_table, location_key,
-- final_demographics_table
location_key, org_demographics_table, location_key, date_start, ds,
-- Final query
location_key, location_key,
storage_project_id, place_dataset, activity_table, ds,
 location_key, location_key);
END
