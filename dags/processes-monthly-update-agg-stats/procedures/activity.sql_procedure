CREATE OR REPLACE PROCEDURE `storage-prod-olvin-com.procedures.activity`(
    location_key STRING,
    storage_project_id STRING,
    demographics_table STRING,
    ds STRING,
    inference_dataset STRING,
    inference_table STRING,
    extra_columns_insert STRING,
    activity_table STRING,
    prev_ds STRING,
    extra_columns_join STRING,
    postgres_table STRING,
    monthly_visits_table STRING,
    visits_joins STRING,
    daily_table STRING
)

BEGIN
DECLARE opening_date_str STRING DEFAULT "NULL";
DECLARE closing_date_str STRING DEFAULT "NULL";
DECLARE extra_columns_string STRING DEFAULT "";
DECLARE monthly_table_string STRING DEFAULT "FALSE";
IF location_key = "fk_sgplaces" THEN
    SET opening_date_str = "opening_date";
    SET closing_date_str = "closing_date";
    SET extra_columns_string = "* EXCEPT (fk_sgplaces, run_date, activity, confidence_level)";
    SET monthly_table_string = "monthly_table.fk_sgplaces IS NULL";
END IF;
EXECUTE IMMEDIATE FORMAT(
"""
INSERT `%s`
WITH
places_dates AS (
  SELECT
  pid AS %s,
  IFNULL(%s, DATE("2019-01-01")) AS opening_date,
  IFNULL(%s, DATE("%s")) AS closing_date
  FROM `%s`
),
demographics_activity AS (
  SELECT
    %s,
    IF(count_active >= 3, "active", "inactive") AS activity
  FROM
    (
      SELECT DISTINCT
        %s,
        COUNT(DISTINCT local_date) AS count_active
      FROM
        `%s.%s`
      JOIN places_dates
        USING(%s)
      WHERE
        local_date >= DATE_SUB(DATE_TRUNC(closing_date, MONTH), INTERVAL 2 MONTH)
      GROUP BY
        %s
    ) FULL
    OUTER JOIN (
      SELECT
        DISTINCT %s
      FROM
        `%s.%s`
    ) USING(%s)
),
inference_activity_table AS (
  SELECT
    %s,
    IF(activity_level < 17, "active", "inactive") AS activity,
    IFNULL(ROUND(1-(activity_level-1)/30, 2), ROUND(1-(17-1)/30, 2)) AS confidence_level
    FROM demographics_activity
    FULL OUTER JOIN (
      SELECT
        %s,
        activity_level
      FROM
        `%s.%s.%s`
    )
    USING(%s)
    FULL OUTER JOIN (
      SELECT pid AS %s FROM `%s`
    )
    USING(%s)
),
final_hourly_table AS (SELECT DISTINCT
  %s,
  DATE("%s") AS run_date,
  CASE
    WHEN new_table.activity = "active" THEN "active"
    ELSE "inactive"
   END AS activity,
   IFNULL(confidence_level, 0.47) AS confidence_level,
  %s
FROM
(select
    distinct
    %s,
    IF(COUNT(*) OVER (PARTITION BY %s) > 1, "inactive", activity) AS activity,
    IF(COUNT(*) OVER (PARTITION BY %s) > 1, 0.47, confidence_level) AS confidence_level
  from
    (
    SELECT DISTINCT * FROM inference_activity_table
    )
  ) AS new_table
%s
RIGHT JOIN (SELECT pid AS %s FROM `%s`) USING (%s))

SELECT
  %s,
  run_date,
  IF(missing_rankings.%s IS NOT NULL, "no_data", IF(%s, "no_data", IF(daily_table.%s IS NULL, "inactive", activity))) AS activity,
  confidence_level,
  %s
FROM
final_hourly_table
LEFT JOIN (SELECT DISTINCT %s FROM %s) AS monthly_table
USING(%s)
LEFT JOIN %s
LEFT JOIN (
  SELECT DISTINCT %s FROM `%s`
) AS daily_table USING(%s)
""",
activity_table,
location_key, opening_date_str, closing_date_str, ds,
postgres_table,
location_key,
 location_key,
storage_project_id, demographics_table,
location_key,
location_key,
location_key,
storage_project_id, demographics_table,
location_key,
location_key, location_key,
storage_project_id, inference_dataset, inference_table,
location_key,
location_key, postgres_table, location_key,
location_key,
ds,
extra_columns_insert,
location_key, location_key, location_key,
 extra_columns_join, location_key,
postgres_table, location_key,
-- Final table including monthly data
location_key,
location_key,
monthly_table_string, location_key,
extra_columns_string,
location_key, monthly_visits_table,
location_key,
visits_joins,

location_key, daily_table,
location_key
);
END