--TODO: 
--change config for the right tables
--change the dates to that not just running for one date / is running daily.
--Ask Alfonso aobut naics_code_subcategories check is the right table as used to be sg_categories_match_old_table for both
CREATE OR REPLACE PROCEDURE `storage-prod-olvin-com.procedures.smc_visits_share`(
    zipcode_demographics_table STRING,
    device_zipcodes_dataset STRING,
    start_date STRING,
    poi_visits_dataset STRING,
    categories_match_table STRING,
    naics_code_subcategories_table STRING,
    places_table STRING,
    weather_table STRING,
    weather_dictionary_table STRING,
    holidays_table STRING,
    holidays_dictionary_table STRING,
    tf_classifier_model STRING,
    prior_distance_table STRING,
    OUT query_string STRING,
    OUT final_table STRING
)
BEGIN
SET query_string = CONCAT(FORMAT("""
  -- demographics based on zip_code
  demographics_0 AS (
    SELECT * EXCEPT (rd_nb)
    FROM
    (SELECT
      zip_id,
      fk_life_stages,
      fk_incomes_5 AS fk_incomes,
      fk_csds,
      row_number () over (partition by zip_id) rd_nb
    FROM
    `%s`
--       `{{ var.value.storage_project_id }}.{{ params['demographics_dataset'] }}.{{ params['zipcode_demographics_table'] }}`
      )
    WHERE rd_nb = 1
    ),
-- devices_zipcode
  device_zipcodes AS (
  SELECT
    device_id,
    local_date,
    MAX(zip_id) AS zip_id
  FROM
  `%s.*`
--     `{{ var.value.storage_project_id }}.{{ params['device_zipcodes_dataset'] }}.{{ params['visits_share_device_zipcodes_table'] }}`
  where local_date >= DATE_TRUNC(DATE('%s'), MONTH) AND local_date < DATE_ADD(DATE_TRUNC(DATE('%s'), MONTH), INTERVAL 1 MONTH)
  GROUP BY
    device_id, local_date
),
-- joining the last two tables to get the demographics of the devices
  demographics AS (
  SELECT
    device_id,
    fk_life_stages,
    fk_incomes,
    fk_csds,
    local_date
  FROM
    device_zipcodes
  LEFT JOIN
    demographics_0
  ON
    device_zipcodes.zip_id = demographics_0.zip_id

),
  -- reading the columns we need from poi_visits
  poi_visits_with_personas AS (
  SELECT
    poi_visits.* EXCEPT(hour_week),
    visit_score.opening,
    hour_week,
    fk_incomes,
    fk_life_stages
  FROM
    `%s.*` AS poi_visits
--     `{{ params['storage-dev'] }}.{{ params['poi_visits_dataset'] }}.*` AS poi_visits
  LEFT JOIN
    demographics
  ON
    demographics.device_id = poi_visits.device_id
    AND demographics.local_date = DATE_TRUNC(poi_visits.local_date, MONTH)
  WHERE
    (poi_visits.local_date = CAST('%s' AS DATE))
--     (poi_visits.local_date = CAST("{{ params['local_date_start'] }}" AS DATE))
),

-- joining olvin_category code, centroid...
adding_categories as (
    select
        poi_visits_with_personas.* ,
        categories_match_table_old.olvin_category_old,
        categories_match_table_new.olvin_category,
        centroid
    from poi_visits_with_personas
    LEFT JOIN
    (select naics_code, olvin_category as olvin_category_old from
        `%s` )  AS categories_match_table_old
--         `{{ params['storage_project'] }}.{{ params['sg_base_tables_dataset'] }}.{{ params['sg_categories_match_old_table'] }}` )  AS categories_match_table
    ON CAST(poi_visits_with_personas.naics_code as string) = categories_match_table_old.naics_code
    LEFT JOIN
    (select naics_code, olvin_category from
        `%s` )  AS categories_match_table_new
--         `{{ params['storage_project'] }}.{{ params['sg_base_tables_dataset'] }}.{{ params['naics_code_subcategories'] }}` )  AS categories_match_table
    ON poi_visits_with_personas.naics_code = categories_match_table_new.naics_code
    LEFT JOIN
    (select pid as fk_sgplaces, SAFE.ST_GEOGPOINT(longitude, latitude) as centroid, parent_bool from
        `%s`
--         `{{ params['storage_project'] }}.{{ params['smc_places_data_dataset'] }}.{{ params['places_data_table'] }}`
    ) AS places_table
    USING (fk_sgplaces)
),

--- weather
weather_collection as (
  select identifier, hour_ts, local_date, min(local_hour) as local_hour, avg(factor) as factor
  from
    `%s`
--     `{{ params['storage_project'] }}.{{ params['new_regressors_dataset'] }}.{{ params['weather_collection_table'] }}`
  WHERE
    (local_date = CAST('%s' AS DATE))
--     (local_date = CAST("{{ params['local_date_start'] }}" AS DATE))
  group by identifier, hour_ts, local_date
),
adding_weather as (
  select adding_categories.*,
      temperature,
      IFNULL(precip_intensity, 0) as precip_intensity
  from adding_categories
  inner join `%s` using (fk_sgplaces)
  left join (select distinct hour_ts, factor as precip_intensity, identifier as identifier_precip_intensity  from weather_collection)  using (identifier_precip_intensity, hour_ts)
  left join (select distinct hour_ts, factor as temperature, identifier as identifier_temperature  from weather_collection)  using (identifier_temperature, hour_ts)
),

---------HOLIDAYSS---------
holidays_collection as (
  select * from `%s`
--   select * from `{{ params['storage_project'] }}.{{ params['regressors_dataset'] }}.{{ params['holidays_collection_table'] }}`
),
adding_holidays as (
  select
    adding_weather.*,
    IFNULL(christmas_factor, 0) as christmas_factor,
    IFNULL(black_friday_factor, 0) as black_friday_factor,
    IFNULL(back_to_school_factor, 0) as back_to_school_factor,
  from adding_weather
  inner join `%s` using (fk_sgplaces)
  left join (select distinct local_date, factor as christmas_factor  from holidays_collection where identifier = 'christmas')  using (local_date)
  left join (select distinct local_date, 0 as black_friday_factor  from holidays_collection where identifier = 'black_friday')  using (local_date)
  left join (select distinct local_date, 0 as back_to_school_factor  from holidays_collection where identifier = 'back_to_school')  using (local_date)
),
final_input as (
SELECT
  *
FROM adding_holidays
),
final_model_output as (
  SELECT
      *,
      CASE
        WHEN REGEXP_EXTRACT( TO_JSON_STRING(t), CONCAT(r'(?i)"output_label_', olvin_category, '":"?([^"}]+),"?')) IS NULL THEN CAST(REGEXP_EXTRACT( TO_JSON_STRING(t), CONCAT(r'(?i)"', "output_label_group", '":"?([^"}]+),"?')) as FLOAT64)
      ELSE
          CAST(REGEXP_EXTRACT( TO_JSON_STRING(t), CONCAT(r'(?i)"output_label_', olvin_category, '":"?([^"}]+),"?')) as FLOAT64)
        END
          AS visit_share_output
  FROM
    ML.PREDICT(MODEL
    `%s`,
--     `{{ var.value.storage_project_id }}.{{ params['visit_share_dataset'] }}.{{ params['visits_share_model'] }}` ,
    (
      SELECT
         *
      FROM
         final_input
      )) AS t
),

-- calculating the probability based on distance using PriorDistance function
  sample_poi_visits_distance_to_centroid as (
    select
    *,
    ST_DISTANCE(lat_long_visit_point, centroid) as distant_centroid
    from final_model_output
),
-- calculating the probability based on distance using PriorDistance function
sample_poi_visits_distance_prob as (
    select
    *,
    CASE WHEN
      opening > 0
    THEN 1
    ELSE 0
  END AS poi_opened,
    -- (select parameter from `storage-prod-olvin-com.visits_share.us_prior_distance_function`) * exp(- (select decay from  `storage-prod-olvin-com.visits_share.us_prior_distance_function`) * (distant_centroid)) + (select floor from  `storage-prod-olvin-com.visits_share.us_prior_distance_function`) as probability_distance
    (select parameter from  `%s` ) * exp(- (select decay from  `%s`) * (distant_centroid)) + (select floor from  `%s`) as probability_distance

    from sample_poi_visits_distance_to_centroid
),
scale_visit_share as (
  SELECT sample_poi_visits_distance_prob.* EXCEPT(visit_share_output, centroid, distant_centroid, probability_distance),
  poi_opened * (probability_distance * IF(IS_NAN(visit_share_output), 1/22, visit_share_output ) )/SUM((probability_distance * IF(IS_NAN(visit_share_output), 1/22, visit_share_output ) )) OVER (PARTITION BY visit_ts, device_id, poi_opened, parent_bool) as visit_score_visit_share
  FROM
    sample_poi_visits_distance_prob
)
""",
zipcode_demographics_table, device_zipcodes_dataset, start_date, start_date, poi_visits_dataset,
start_date, categories_match_table, naics_code_subcategories_table, places_table, weather_table,
start_date, weather_dictionary_table, holidays_table, holidays_dictionary_table, tf_classifier_model,
prior_distance_table, prior_distance_table, prior_distance_table));
SET final_table = "scale_visit_share";
END