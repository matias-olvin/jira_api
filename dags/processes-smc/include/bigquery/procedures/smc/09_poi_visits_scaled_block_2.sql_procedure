CREATE OR REPLACE PROCEDURE `storage-prod-olvin-com.procedures.smc_block_2_scaling`(
    destination_table STRING,
    start_date STRING,
    granularity_real_visits_device_based STRING,
    input_table STRING,
    real_visits_met_area_factors_table STRING,
    pre_scaling_poi_based_table STRING,
    ml_factors_poi_based_table STRING
)
OPTIONS(
   description="""Apply real visits scaling to preliminary POI visits scaled."""
 )
BEGIN
DECLARE real_visits_query_string STRING;
DECLARE real_visits_final_table STRING;
CALL `storage-prod-olvin-com.procedures.smc_real_visits`(
    input_table,
    start_date,
    granularity_real_visits_device_based,
    real_visits_met_area_factors_table,
    pre_scaling_poi_based_table,
    ml_factors_poi_based_table,
    real_visits_query_string,
    real_visits_final_table
);
EXECUTE IMMEDIATE FORMAT("DELETE FROM `%s` WHERE local_date = '%s' ",
 destination_table, start_date);
EXECUTE IMMEDIATE CONCAT(FORMAT("""
INSERT INTO
 `%s`
WITH
--REAL VISITS
  %s

SELECT
    device_id,
    lat_long_visit_point, 
    publisher_id,
    country,
    device_os,
    local_date, 
    local_hour, 
    day_of_week, 
    hour_week, 
    hour_ts, 
    visit_ts, 
    duration,
    fk_sgplaces, 
    fk_sgbrands, 
    naics_code, 
    enclosed,
    STRUCT(visit_score_steps.original as original, 
    visit_score_steps.weighted as weighted, 
    visit_score_steps.opening as opening,
    visit_score_steps.visit_share AS visit_share,
    visit_score_steps.daily_estimation AS daily_estimation, 
    visit_score_steps.real_device_based AS real_device_based,
    visit_score_steps.ratio_poi_mall as ratio_poi_mall,
    visit_score_steps.smoothing_factor as smoothing_factor,
    visit_score_steps.factor_ground_truth as factor_ground_truth,
    visit_score_steps.category_factor as category_factor,
    visit_score_steps.real_poi_based AS real_poi_based) as visit_score_steps,
    visit_score_steps.real_poi_based as visit_score
FROM
    %s
CROSS JOIN
-- This part of the query will fail if the number of rows does not match the original value. Because it fails, we avoid billing
-- The error must be in some of the previous queries, one that reduces the number of rows
    (SELECT COUNT(*) AS count_real_visits FROM %s)
CROSS JOIN
    (SELECT COUNT(*) AS count_old FROM %s WHERE local_date = "%s")
""",
destination_table, real_visits_query_string, real_visits_final_table, real_visits_final_table, input_table, start_date),
"""
WHERE IF(
    (100*ABS((count_old - count_real_visits)/(count_old))) < 100,
    TRUE,
    ERROR(FORMAT("REAL VISITS. Number of rows must be equal in source and destination tables, but source has %d rows and destination has %d rows.", count_old, count_real_visits))
)
""");
END